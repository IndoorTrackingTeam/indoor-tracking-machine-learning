name: Train Model PROD

on:
  workflow_dispatch:
    inputs:
      manual_deploy:
        description: "Manual Deploy"
        required: true
        type: boolean
        default: true
  push:
    branches:
      - main
      - fix-model

env:
  IMAGE: machine-learning-api
  PORT: 8000
  REGION: us-east1
  CPU: 2
  MEMORY: 4Gi
  TIMEOUT: 300
  CONCURRENCY: 80
  MAX_INSTANCES: 5
  MIN_INSTANCES: 0

jobs:
  test:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt

    - name: Tests with pytest
      run: |
        pytest -vv --cov=api --cov-report=xml --cov-report=html

    - name: Upload HTML report
      uses: actions/upload-artifact@v3
      with:
        name: pytest_html_report
        path: pytest_html_report.html

    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v3
      with:
        name: html-coverage-report
        path: htmlcov/

  setup-and-script:
    name: Setup and Run Script
    runs-on: ubuntu-latest
    needs: test
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - id: 'auth'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('training/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r training/requirements.txt

    - name: Run Python script
      run: |
        python training/model_training_service.py

    - name: Move AutogluonModels to API folder
      run: |
        mkdir -p api/AutogluonModels
        mv AutogluonModels/* api/AutogluonModels/

    - name: Upload AutogluonModels
      uses: actions/upload-artifact@v3
      with:
        name: autogluonmodels
        path: api/AutogluonModels/

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: setup-and-script
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - id: 'auth'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Login to GCR
      uses: docker/login-action@v1
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker us-east1-docker.pkg.dev

    - name: Download AutogluonModels
      uses: actions/download-artifact@v3
      with:
        name: autogluonmodels
        path: api/AutogluonModels/

    - name: Build Docker image
      run: |-
        docker build \
          --tag "us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/ar-backend/${{ env.IMAGE }}-prod:latest" \
          ./api

    - name: Publish Docker image
      run: |-
        docker push "us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/ar-backend/${{ env.IMAGE }}-prod:latest"

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy run-${{ env.IMAGE }}-prod \
        --image us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/ar-backend/${{ env.IMAGE }}-prod:latest \
        --platform managed \
        --allow-unauthenticated \
        --cpu=$CPU \
        --port=$PORT \
        --memory=$MEMORY \
        --region $REGION \
        --timeout=$TIMEOUT \
        --concurrency=$CONCURRENCY \
        --min-instances=$MIN_INSTANCES \
        --max-instances=$MAX_INSTANCES
